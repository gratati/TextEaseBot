# callbacks.py
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ Telegram-–±–æ—Ç–∞

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler
import asyncio
import random
import logging

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ bot.py)
simplify_long_text = None
translate_text = None
evaluate_simplification = None
split_text = None
sent_tokenize = None
logger = logging.getLogger(__name__)


async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
    """
    query = update.callback_query
    await query.answer()

    data = query.data
    user_id = update.effective_user.id
    logger.info(f"User {user_id} clicked: {data}")

    # --- –§–∞–∫—Ç—á–µ–∫–∏–Ω–≥: —Ä–∞–∑–±–∏–≤–∫–∞ –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ---
    if data == "fact_checking":
        original = context.user_data.get('pending_text', '')
        if not original or not original.strip():
            await query.edit_message_text("‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            return

        try:
            sentences = sent_tokenize(original, language='russian')
        except:
            sentences = sent_tokenize(original)

        claims = [s.strip() for s in sentences if s.strip() and len(s) > 10]
        if not claims:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–µ–ª–∏—Ç—å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
            return

        # –û–±—Ä–µ–∑–∞–µ–º, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ
        claims_text = "\n".join([f"{i}. {claim}" for i, claim in enumerate(claims, 1)])
        if len(claims_text) > 3500:
            claims_text = claims_text[:3500] + "\n\n‚Ä¶ (–æ–±—Ä–µ–∑–∞–Ω–æ)"

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–æ—â—ë–Ω–Ω–æ–º—É", callback_data="back_to_simplified")]
        ]

        await query.edit_message_text(
            f"üîç *–†–µ–∂–∏–º —Ñ–∞–∫—Ç—á–µ–∫–∏–Ω–≥–∞*\n\n{claims_text}",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

    # --- –í–æ–∑–≤—Ä–∞—Ç –∫ —É–ø—Ä–æ—â—ë–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É ---
    elif data == "back_to_simplified":
        simplified = context.user_data.get('simplified_text', '')
        strength = context.user_data.get('last_strength', 'medium')
        if not simplified:
            await query.edit_message_text("‚ùå –ù–µ—Ç —É–ø—Ä–æ—â—ë–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.")
            return

        keyboard = [
            [InlineKeyboardButton("üî§ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π", callback_data="translate")],
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —É—Ä–æ–≤–µ–Ω—å", callback_data="change_level")],
            [InlineKeyboardButton("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª", callback_data="show_original")],
            [InlineKeyboardButton("üîç –§–∞–∫—Ç—á–µ–∫–∏–Ω–≥", callback_data="fact_checking")]
        ]

        await query.edit_message_text(
            f"‚úÖ *–£–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç ({'–ª—ë–≥–∫–∏–π' if strength == 'light' else '—Å—Ä–µ–¥–Ω–∏–π' if strength == 'medium' else '—Å–∏–ª—å–Ω—ã–π'}):*\n\n{simplified}",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

    # --- –£–ø—Ä–æ—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ---
    elif data.startswith("simplify_"):
        strength = data.split("_")[1]
        text = context.user_data.get('pending_text', '')
        if not text or not text.strip():
            await query.edit_message_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è.")
            return

        thinking_messages = [
            "üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...",
            "‚úçÔ∏è –£–ø—Ä–æ—â–∞—é —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–º—ã—Å–ª–∞...",
            "üîç –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞—é ‚Äî —á—Ç–æ–±—ã –±—ã–ª–æ —è—Å–Ω–æ...",
            "üß© –ì–æ—Ç–æ–≤–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...",
            "‚úÖ –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!"
        ]
        messages = random.sample(thinking_messages, len(thinking_messages))

        for msg in messages:
            if msg != query.message.text:
                try:
                    await query.edit_message_text(msg)
                except:
                    pass
            await asyncio.sleep(1.2)

        simplified = simplify_long_text(text, strength=strength)
        context.user_data['simplified_text'] = simplified
        context.user_data['last_strength'] = strength

        metrics = evaluate_simplification(text, simplified)
        quality_info = (
            f"\n\nüìä *–û—Ü–µ–Ω–∫–∞ —É–ø—Ä–æ—â–µ–Ω–∏—è:*\n"
            f"üî§ –î–ª–∏–Ω–∞: {metrics['original_length']} ‚Üí {metrics['simplified_length']} —Å–ª–æ–≤\n"
            f"‚öñÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–º—ã—Å–ª–∞ (BLEU): {metrics['bleu']}/100\n"
            f"üí° {metrics['quality_hint']}"
        )

        warning = ""
        if len(simplified.split()) > 300:
            warning = "\n\n‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω—ã–π ‚Äî –º–æ–≥ –±—ã—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ –æ–±—Ä–µ–∑–∞–Ω."

        keyboard = [
            [InlineKeyboardButton("üî§ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π", callback_data="translate")],
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —É—Ä–æ–≤–µ–Ω—å", callback_data="change_level")],
            [InlineKeyboardButton("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª", callback_data="show_original")],
            [InlineKeyboardButton("üîç –§–∞–∫—Ç—á–µ–∫–∏–Ω–≥", callback_data="fact_checking")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            f"‚úÖ *–£–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç ({strength}):*\n\n{simplified}{quality_info}{warning}",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    # --- –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π ---
    elif data == "translate":
        simplified = context.user_data.get('simplified_text', '')
        if not simplified:
            await query.edit_message_text("‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
            return

        await query.edit_message_text("üî§ –ü–µ—Ä–µ–≤–æ–∂—É –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π...")

        try:
            translated = translate_text(simplified)
            keyboard = [
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–æ—â—ë–Ω–Ω–æ–º—É", callback_data="back_to_simplified")]
            ]
            await query.edit_message_text(
                f"üá¨üáß *–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π:*\n\n{translated}",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"Translation error for user {user_id}: {e}")
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")

    # --- –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —É—Ä–æ–≤–µ–Ω—å ---
    elif data == "change_level":
        await query.message.reply_text(
            "üîÑ *–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —É–ø—Ä–æ—â–µ–Ω–∏—è*\n–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üôÇ –õ—ë–≥–∫–∏–π", callback_data="simplify_light")],
                [InlineKeyboardButton("‚öñÔ∏è –°—Ä–µ–¥–Ω–∏–π", callback_data="simplify_medium")],
                [InlineKeyboardButton("üî• –°–∏–ª—å–Ω—ã–π", callback_data="simplify_strong")],
                [InlineKeyboardButton("üîç –§–∞–∫—Ç—á–µ–∫–∏–Ω–≥", callback_data="fact_checking")]
            ])
        )

    # --- –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª ---
    elif data == "show_original":
        original = context.user_data.get('pending_text', '')
        if not original:
            await query.answer("‚ùå –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        try:
            await query.delete_message()
        except:
            pass

        max_length = 4096 - 100
        if len(original) <= max_length:
            await query.message.reply_text(
                f"üìú *–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç:*\n\n{original}",
                parse_mode='Markdown'
            )
        else:
            parts = split_text(original, max_chars=3500)
            for i, part in enumerate(parts):
                if part.strip():
                    text = f"üìú *–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç (—á–∞—Å—Ç—å {i+1}):*\n\n{part}"
                    await query.message.reply_text(text, parse_mode='Markdown')
                    await asyncio.sleep(0.5)

        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–æ—â—ë–Ω–Ω–æ–º—É", callback_data="back_to_simplified")]]
        await query.message.reply_text(
            "–•–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–æ—â—ë–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )


# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ ---
def register_callbacks(app):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫.
    """
    app.add_handler(CallbackQueryHandler(button_click))