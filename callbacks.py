import os
import re
import asyncio
import random
import logging
from typing import Optional, List, Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from utils import (
    send_typing_action, safe_edit_message, send_thinking_messages,
    split_text, simplify_text, translate_text, evaluate_simplification,
    get_main_keyboard, get_simplify_keyboard
)

logger = logging.getLogger(__name__)

async def simplify_claim(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    claim_index = int(query.data.split('_')[-1])
    claims = context.user_data.get('fact_check_claims', [])
    
    if not claims or claim_index >= len(claims):
        await query.edit_message_text("‚ùå –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    claim = claims[claim_index]
    
    await query.edit_message_text(
        f"üìù *–£–ø—Ä–æ—â–µ–Ω–∏–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:*\n\n_{claim}_\n\n"
        "‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —É–ø—Ä–æ—â–µ–Ω–∏–µ...",
        parse_mode='Markdown'
    )
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å —É–ø—Ä–æ—â–µ–Ω–∏—è —Å —É—Ä–æ–≤–Ω–µ–º medium –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        simplified = simplify_text(
            claim,
            strength="medium",
            simplify_tokenizer=context.bot_data['simplify_tokenizer'],
            simplify_model=context.bot_data['simplify_model'],
            device=context.bot_data['device']
        )
        
        result_text = (
            f"üìù *–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:*\n\n"
            f"{simplified}\n\n"
            f"üìå *–û—Ä–∏–≥–∏–Ω–∞–ª:*\n_{claim}_"
        )
        
        keyboard = [
            [
                InlineKeyboardButton("üîÑ –î—Ä—É–≥–æ–π —É—Ä–æ–≤–µ–Ω—å", callback_data=f"change_claim_level_{claim_index}"),
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_uploaded_text")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            result_text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–æ—â–µ–Ω–∏—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–æ—â–µ–Ω–∏–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")

async def change_claim_level(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    claim_index = int(query.data.split('_')[-1])
    claims = context.user_data.get('fact_check_claims', [])
    
    if not claims or claim_index >= len(claims):
        await query.edit_message_text("‚ùå –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    context.user_data['current_claim_index'] = claim_index
    
    keyboard = [
        [
            InlineKeyboardButton("‚öñÔ∏è –°—Ä–µ–¥–Ω–∏–π", callback_data=f"simplify_claim_medium_{claim_index}"),
            InlineKeyboardButton("üî• –°–∏–ª—å–Ω—ã–π", callback_data=f"simplify_claim_strong_{claim_index}")
        ],
        [
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_uploaded_text")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —É–ø—Ä–æ—â–µ–Ω–∏—è:",
        reply_markup=reply_markup
    )

async def simplify_claim_with_strength(update: Update, context: ContextTypes.DEFAULT_TYPE, claim_index: int, strength: str):
    query = update.callback_query
    await query.answer()
    
    claims = context.user_data.get('fact_check_claims', [])
    
    if not claims or claim_index >= len(claims):
        await query.edit_message_text("‚ùå –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    claim = claims[claim_index]
    
    await query.edit_message_text(
        f"üìù *–£–ø—Ä–æ—â–µ–Ω–∏–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ({strength}):*\n\n_{claim}_\n\n"
        "‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —É–ø—Ä–æ—â–µ–Ω–∏–µ...",
        parse_mode='Markdown'
    )
    
    try:
        simplified = simplify_text(
            claim,
            strength=strength,
            simplify_tokenizer=context.bot_data['simplify_tokenizer'],
            simplify_model=context.bot_data['simplify_model'],
            device=context.bot_data['device']
        )
        
        result_text = (
            f"üìù *–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ({strength}):*\n\n"
            f"{simplified}\n\n"
            f"üìå *–û—Ä–∏–≥–∏–Ω–∞–ª:*\n_{claim}_"
        )
        
        keyboard = [
            [
                InlineKeyboardButton("üîÑ –î—Ä—É–≥–æ–π —É—Ä–æ–≤–µ–Ω—å", callback_data=f"change_claim_level_{claim_index}"),
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_uploaded_text")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            result_text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–æ—â–µ–Ω–∏—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–æ—â–µ–Ω–∏–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")

async def show_last_uploaded_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    text = context.user_data.get('pending_text', '').strip()
    
    if not text:
        await safe_edit_message(query, "‚ùå –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    try:
        await query.delete_message()
    except Exception as e:
        logger.warning(f"Error deleting message: {e}")
    
    max_length = 4096 - 100
    if len(text) <= max_length:
        await query.message.reply_text(
            f"üìú *–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:*\n\n{text}",
            parse_mode='Markdown'
        )
    else:
        parts = split_text(text, max_chars=3500)
        for i, part in enumerate(parts):
            if part.strip():
                text_part = f"üìú *–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (—á–∞—Å—Ç—å {i+1}):*\n\n{part}"
                await query.message.reply_text(text_part, parse_mode='Markdown')
                await asyncio.sleep(0.5)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–µ–∫—Å—Ç–æ–º
    keyboard = [
        [InlineKeyboardButton("‚öñÔ∏è –°—Ä–µ–¥–Ω–∏–π", callback_data="simplify_medium")],
        [InlineKeyboardButton("üî• –°–∏–ª—å–Ω—ã–π", callback_data="simplify_strong")],
        [InlineKeyboardButton("üîç –§–∞–∫—Ç—á–µ–∫–∏–Ω–≥", callback_data="fact_checking")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def fact_check_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    help_text = (
        "‚ùì *–ü–æ–º–æ—â—å –ø–æ —Ä–µ–∂–∏–º—É —Ñ–∞–∫—Ç—á–µ–∫–∏–Ω–≥–∞*\n\n"
        "üîç *–ß—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ?*\n"
        "–†–µ–∂–∏–º —Ñ–∞–∫—Ç—á–µ–∫–∏–Ω–≥–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –≤—ã–¥–µ–ª—è–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å.\n\n"
        "üìã *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º '–§–∞–∫—Ç—á–µ–∫–∏–Ω–≥'\n"
        "3. –ë–æ—Ç —Ä–∞–∑–æ–±—å–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
        "4. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è:\n"
        "   ‚Ä¢ üìù *–£–ø—Ä–æ—Å—Ç–∏—Ç—å* - —É–ø—Ä–æ—Å—Ç–∏—Ç—å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ\n\n"
        "‚ö†Ô∏è *–í–∞–∂–Ω–æ:*\n"
        "‚Ä¢ –ë–æ—Ç –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É\n"
        "‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–æ—Å—è—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä\n"
        "‚Ä¢ –î–ª—è –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n\n"
        "üí° *–°–æ–≤–µ—Ç:* –ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã—Ö –∏–ª–∏ —Å–ø–æ—Ä–Ω—ã—Ö —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π."
    )
    keyboard = [
        [
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è–º", callback_data="back_to_fact_check")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        help_text,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    help_text = (
        "‚ùì *–ü–æ–º–æ—â—å –ø–æ TextEaseBot*\n\n"
        "ü§ñ *–ß—Ç–æ —è —É–º–µ—é:*\n"
        "‚Ä¢ üìù –£–ø—Ä–æ—â–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –Ω–∞ 2 —É—Ä–æ–≤–Ω—è—Ö\n"
        "‚Ä¢ üåç –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫\n"
        "‚Ä¢ üìÑ –†–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏ .txt –∏ .docx\n\n"
        "üìã *–ö–∞–∫ –Ω–∞—á–∞—Ç—å:*\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é\n"
        "2. –ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å —Ç–µ–∫—Å—Ç–æ–º\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –º–µ–Ω—é\n\n"
        "üîß *–£—Ä–æ–≤–Ω–∏ —É–ø—Ä–æ—â–µ–Ω–∏—è:*\n"
        "‚Ä¢ ‚öñÔ∏è *–°—Ä–µ–¥–Ω–∏–π* - –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ\n"
        "‚Ä¢ üî• *–°–∏–ª—å–Ω—ã–π* - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ\n\n"
        "‚ö†Ô∏è *–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*\n"
        "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 20 –ú–ë\n"
        "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: 10 000 —Å–∏–º–≤–æ–ª–æ–≤\n"
        "‚Ä¢ –Ø - –ò–ò, –º–æ–≥—É –æ—à–∏–±–∞—Ç—å—Å—è –≤ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–º–∞—Ö\n\n"
        "üí° *–°–æ–≤–µ—Ç:* –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∞–π–ª—ã."
    )
    keyboard = [
        [
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"),
            InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        help_text,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def handle_back_to_simplified(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    simplified = context.user_data.get('simplified_text', '').strip()
    strength = context.user_data.get('last_strength', 'medium')
    
    if not simplified:
        await safe_edit_message(query, "‚ùå –ù–µ—Ç —É–ø—Ä–æ—â—ë–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.")
        return
    
    strength_names = {
        'light': '–ª—ë–≥–∫–∏–π',
        'medium': '—Å—Ä–µ–¥–Ω–∏–π',
        'strong': '—Å–∏–ª—å–Ω—ã–π'
    }
    strength_name = strength_names.get(strength, '—Å—Ä–µ–¥–Ω–∏–π')
    
    await safe_edit_message(
        query,
        f"‚úÖ *–£–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç ({strength_name}):*\n\n{simplified}",
        reply_markup=get_simplify_keyboard(),
        parse_mode='Markdown'
    )

async def handle_simplify(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    strength = data.split("_")[1]
    text = context.user_data.get('pending_text', '').strip()
    
    if not text:
        await safe_edit_message(query, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è.")
        return
    
    await safe_edit_message(query, f"üîÑ –£–ø—Ä–æ—â–∞—é —Ç–µ–∫—Å—Ç ({strength} —É—Ä–æ–≤–µ–Ω—å)...")
    
    if len(text) > 2000:
        parts = split_text(text, 1500)
        total_parts = len(parts)
        for i, part in enumerate(parts):
            if part.strip():
                progress = (i + 1) / total_parts * 100
                await safe_edit_message(
                    query,
                    f"üîÑ –£–ø—Ä–æ—â–∞—é —Ç–µ–∫—Å—Ç ({strength} —É—Ä–æ–≤–µ–Ω—å)...\n\n"
                    f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {i+1}/{total_parts} —á–∞—Å—Ç–µ–π ({progress:.0f}%)"
                )
                await asyncio.sleep(0.5)
    
    thinking_messages = [
        "üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–∫—Å—Ç–∞...",
        "‚úçÔ∏è –£–ø—Ä–æ—â–∞—é —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–º—ã—Å–ª–∞...",
        "üîç –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞—é ‚Äî —á—Ç–æ–±—ã –±—ã–ª–æ —è—Å–Ω–æ...",
        "üß© –ì–æ—Ç–æ–≤–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...",
        "‚úÖ –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!"
    ]
    random.shuffle(thinking_messages)
    await send_thinking_messages(query, thinking_messages)
    
    try:
        simplified = simplify_long_text(
            text,
            strength=strength,
            simplify_tokenizer=context.bot_data['simplify_tokenizer'],
            simplify_model=context.bot_data['simplify_model'],
            device=context.bot_data['device']
        )
        
        context.user_data['simplified_text'] = simplified
        context.user_data['last_strength'] = strength
        
        metrics = evaluate_simplification(text, simplified)
        quality_info = (
            f"\n\nüìä *–û—Ü–µ–Ω–∫–∞ —É–ø—Ä–æ—â–µ–Ω–∏—è:*\n"
            f"üî§ –î–ª–∏–Ω–∞: {metrics['original_length']} ‚Üí {metrics['simplified_length']} —Å–ª–æ–≤\n"
            f"‚öñÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–º—ã—Å–ª–∞: {metrics['keyword_overlap_%']}%\n"
            f"üí° {metrics['quality_hint']}"
        )
        
        warning = ""
        if len(simplified.split()) > 300:
            warning = "\n\n‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω—ã–π ‚Äî –º–æ–≥ –±—ã—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ –æ–±—Ä–µ–∑–∞–Ω."
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–µ–∑ –∫–Ω–æ–ø–∫–∏ "–§–∞–∫—Ç—á–µ–∫–∏–Ω–≥"
        keyboard = [
            [InlineKeyboardButton("üî§ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π", callback_data="translate")],
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —É—Ä–æ–≤–µ–Ω—å", callback_data="change_level")],
            [InlineKeyboardButton("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª", callback_data="show_original")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await safe_edit_message(
            query,
            f"‚úÖ *–£–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç ({strength}):*\n\n{simplified}{quality_info}{warning}",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Simplification error: {e}")
        await safe_edit_message(query, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–æ—â–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")

async def handle_translate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    simplified = context.user_data.get('simplified_text', '').strip()
    
    if not simplified:
        await safe_edit_message(query, "‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
        return
    
    await safe_edit_message(query, "üî§ –ü–µ—Ä–µ–≤–æ–∂—É –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π...")
    
    try:
        translated = translate_text(
            simplified,
            translator_tokenizer=context.bot_data['translator_tokenizer'],
            translator_model=context.bot_data['translator_model'],
            bert_tokenizer=context.bot_data['bert_tokenizer'],
            bert_model=context.bot_data['bert_model'],
            device=context.bot_data['device']
        )
        
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–æ—â—ë–Ω–Ω–æ–º—É", callback_data="back_to_simplified")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await safe_edit_message(
            query,
            f"üá¨üáß *–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π:*\n\n{translated}",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Translation error: {e}")
        await safe_edit_message(query, f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")

async def handle_change_level(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
    if not context.user_data.get('pending_text'):
        await safe_edit_message(query, "‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª —Å–Ω–∞—á–∞–ª–∞.")
        return
    
    await query.message.reply_text(
        "üîÑ *–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —É–ø—Ä–æ—â–µ–Ω–∏—è*\n–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:",
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup([
            # –£–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–õ—ë–≥–∫–∏–π"
            [InlineKeyboardButton("‚öñÔ∏è –°—Ä–µ–¥–Ω–∏–π", callback_data="simplify_medium")],
            [InlineKeyboardButton("üî• –°–∏–ª—å–Ω—ã–π", callback_data="simplify_strong")],
            [InlineKeyboardButton("üîç –§–∞–∫—Ç—á–µ–∫–∏–Ω–≥", callback_data="fact_checking")]
        ])
    )

async def handle_show_original(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    original = context.user_data.get('pending_text', '').strip()
    
    if not original:
        await query.answer("‚ùå –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    try:
        await query.delete_message()
    except Exception as e:
        logger.warning(f"Error deleting message: {e}")
    
    max_length = 4096 - 100
    if len(original) <= max_length:
        await query.message.reply_text(
            f"üìú *–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç:*\n\n{original}",
            parse_mode='Markdown'
        )
    else:
        parts = split_text(original, max_chars=3500)
        for i, part in enumerate(parts):
            if part.strip():
                text = f"üìú *–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç (—á–∞—Å—Ç—å {i+1}):*\n\n{part}"
                await query.message.reply_text(text, parse_mode='Markdown')
                await asyncio.sleep(0.5)
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–æ—â—ë–Ω–Ω–æ–º—É", callback_data="back_to_simplified")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(
        "–•–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–æ—â—ë–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É?",
        reply_markup=reply_markup
    )

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    user_id = update.effective_user.id
    logger.info(f"User {user_id} clicked: {data}")
    
    if data.startswith("simplify_claim_"):
        await simplify_claim(update, context)
    elif data.startswith("change_claim_level_"):
        await change_claim_level(update, context)
    elif data.startswith("simplify_claim_medium_") or data.startswith("simplify_claim_strong_"):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ —É—Ä–æ–≤–µ–Ω—å
        parts = data.split('_')
        strength = parts[2]
        claim_index = int(parts[3])
        await simplify_claim_with_strength(update, context, claim_index, strength)
    elif data == "back_to_uploaded_text":
        await show_last_uploaded_text(update, context)
    elif data == "back_to_fact_check":
        from handlers import fact_checking_mode
        await fact_checking_mode(update, context)
    elif data == "fact_check_help":
        await fact_check_help(update, context)
    elif data == "fact_checking":
        from handlers import fact_checking_mode
        await fact_checking_mode(update, context)
    elif data == "back_to_simplified":
        await handle_back_to_simplified(update, context)
    elif data.startswith("simplify_"):
        await handle_simplify(update, context)
    elif data == "translate":
        await handle_translate(update, context)
    elif data == "change_level":
        await handle_change_level(update, context)
    elif data == "show_original":
        await handle_show_original(update, context)
    elif data == "back_to_main":
        keyboard = get_main_keyboard()
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
    elif data == "help":
        await show_help(update, context)
    elif data == "restart":
        from handlers import start
        await start(update, context)
    else:
        logger.warning(f"Unknown callback data: {data}")
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")

def setup_callbacks(application, models):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª–∏ –≤ bot_data –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.bot_data.update(models)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_click))