# handlers.py
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è TextEaseBot

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from docx import Document
import os

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –≤ bot.py)
sent_tokenize = None


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.
    """
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî *TextEaseBot*.\n"
        "–Ø –ø–æ–º–æ–≥–∞—é —É–ø—Ä–æ—â–∞—Ç—å –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç—ã.\n\n"

        "üìå –û—Ç–ø—Ä–∞–≤—å:\n"
        "‚Ä¢ –¢–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é\n"
        "‚Ä¢ –ò–ª–∏ —Ñ–∞–π–ª (.txt, .docx)\n\n"

        "üí° *–í–∞–∂–Ω–æ:* –Ø ‚Äî –ò–ò, –∞ –Ω–µ —ç–∫—Å–ø–µ—Ä—Ç.\n"
        "‚ö†Ô∏è –Ø –º–æ–≥—É *—É–ø—Ä–æ—â–∞—Ç—å* –∏ *–ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å*, –Ω–æ:\n"
        "‚Ä¢ –ù–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é 100% —Ç–æ—á–Ω–æ—Å—Ç—å\n"
        "‚Ä¢ –ú–æ–≥—É –∏—Å–∫–∞–∂–∞—Ç—å —Å–º—ã—Å–ª –≤ —Å–ø–æ—Ä–Ω—ã—Ö –∏–ª–∏ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ–º–∞—Ö\n"
        "‚Ä¢ –ù–µ –∑–∞–º–µ–Ω—è—é —Ñ–∞–∫—Ç—á–µ–∫–∏–Ω–≥ –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É\n\n"

        "üîç –î–ª—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∂–∏–º *–§–∞–∫—Ç—á–µ–∫–∏–Ω–≥*.\n\n"

        "–ì–æ—Ç–æ–≤? –ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç!",
        parse_mode='Markdown'
    )
    await show_buttons(update, context)


async def show_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è.
    """
    keyboard = [
        [InlineKeyboardButton("üôÇ –õ—ë–≥–∫–∏–π", callback_data="simplify_light")],
        [InlineKeyboardButton("‚öñÔ∏è –°—Ä–µ–¥–Ω–∏–π", callback_data="simplify_medium")],
        [InlineKeyboardButton("üî• –°–∏–ª—å–Ω—ã–π", callback_data="simplify_strong")],
        [InlineKeyboardButton("üîç –§–∞–∫—Ç—á–µ–∫–∏–Ω–≥", callback_data="fact_checking")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —É–ø—Ä–æ—â–µ–Ω–∏—è:", reply_markup=reply_markup)


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    context.user_data['pending_text'] = update.message.text
    await show_buttons(update, context)


async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (.txt, .docx).
    """
    doc = update.message.document
    file_name = doc.file_name.lower()
    user_id = update.effective_user.id
    file_path = f"/tmp/temp_{user_id}"

    file = await doc.get_file()
    await file.download_to_drive(file_path)

    text = ""
    try:
        if file_name.endswith(".txt"):
            for enc in ["utf-8", "cp1251", "latin1"]:
                try:
                    with open(file_path, "r", encoding=enc) as f:
                        text = f.read()
                    break
                except Exception:
                    continue
            if not text:
                text = "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª (–∫–æ–¥–∏—Ä–æ–≤–∫–∞)."
        elif file_name.endswith(".docx"):
            docx = Document(file_path)
            text = "\n".join([p.text for p in docx.paragraphs if p.text.strip()])
        else:
            await update.message.reply_text("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .txt –∏ .docx")
            return

        if not text.strip():
            await update.message.reply_text("‚ùå –§–∞–π–ª –ø—É—Å—Ç–æ–π.")
            return

        context.user_data['pending_text'] = text
        await update.message.reply_text(f"üìÑ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤).")
        await show_buttons(update, context)

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
    finally:
        if os.path.exists(file_path):
            os.remove(file_path)


async def fact_checking_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –†–µ–∂–∏–º —Ñ–∞–∫—Ç—á–µ–∫–∏–Ω–≥–∞: —Ä–∞–∑–±–∏–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    query = update.callback_query
    await query.answer()

    text = context.user_data.get('pending_text', '')
    if not text:
        await query.edit_message_text("‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return

    try:
        sentences = sent_tokenize(text, language='russian')
    except:
        sentences = sent_tokenize(text)

    claims = [s.strip() for s in sentences if s.strip() and len(s) > 10]
    if not claims:
        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–µ–ª–∏—Ç—å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        return

    await query.edit_message_text("üîç *–†–µ–∂–∏–º —Ñ–∞–∫—Ç—á–µ–∫–∏–Ω–≥–∞:*\n\n–í—ã–¥–µ–ª–µ–Ω–Ω—ã–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:\n")

    for i, claim in enumerate(claims, 1):
        await query.message.reply_text(f"{i}. {claim}")

    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
    await query.message.reply_text(
        "–ü–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–∂–¥–æ–≥–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–æ–∂–Ω–æ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
def register_handlers(app):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
    """
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(
        filters.Document.FileExtension("txt") |
        filters.Document.FileExtension("docx"),
        handle_document
    ))
    app.add_handler(CallbackQueryHandler(fact_checking_mode, pattern="^fact_checking$"))