import os
import re
import tempfile
import logging
from typing import Optional, List, Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)
from utils import (
    MAX_TEXT_LENGTH, MAX_FILE_SIZE, MAX_PARTS_FOR_WARNING,
    send_typing_action, safe_delete_file, read_txt_file, read_docx_file,
    split_text, simplify_long_text, translate_text, evaluate_simplification,
    get_main_keyboard, get_simplify_keyboard
)

logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_typing_action(update, context)
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî *TextEaseBot*.\n\n"
        "üìå –Ø –ø–æ–º–æ–≥–∞—é:\n"
        "‚Ä¢ –£–ø—Ä–æ—â–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã\n"
        "‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π\n"
        "üí° *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n"
        "1. –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é\n"
        "2. –ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏ —Ñ–∞–π–ª (.txt, .docx)\n"
        "3. –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é\n\n"
        "‚ö†Ô∏è *–í–∞–∂–Ω–æ:*\n"
        "‚Ä¢ –Ø ‚Äî –ò–ò, –∞ –Ω–µ —ç–∫—Å–ø–µ—Ä—Ç\n"
        "‚Ä¢ –ú–æ–≥—É –æ—à–∏–±–∞—Ç—å—Å—è –≤ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–º–∞—Ö\n"
        "‚Ä¢ –ù–µ –∑–∞–º–µ–Ω—è—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É\n\n"
        "üîç –î–ª—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∂–∏–º *–§–∞–∫—Ç—á–µ–∫–∏–Ω–≥*.\n\n"
        "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ? –ü—Ä–∏—Å—ã–ª–∞–π —Ç–µ–∫—Å—Ç!",
        parse_mode='Markdown',
        disable_web_page_preview=True
    )
    await show_buttons(update, context)

async def show_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = get_main_keyboard()
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_typing_action(update, context)
    text = update.message.text.strip()
    
    if not text:
        await update.message.reply_text("‚ùå –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
    if len(text) > MAX_TEXT_LENGTH:
        await update.message.reply_text(
            f"‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤).\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "üí° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ –Ω–∞ —á–∞—Å—Ç–∏."
        )
        return
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
    estimated_parts = len(text) // 1500 + 1
    if estimated_parts > MAX_PARTS_FOR_WARNING:
        await update.message.reply_text(
            f"‚ö†Ô∏è –¢–µ–∫—Å—Ç –¥–æ–≤–æ–ª—å–Ω–æ –¥–ª–∏–Ω–Ω—ã–π ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤).\n"
            f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å {estimated_parts * 5} —Å–µ–∫—É–Ω–¥.\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
        )
    
    context.user_data['pending_text'] = text
    context.user_data['source_type'] = 'text'
    
    await update.message.reply_text(
        f"üìù –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤).\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚öñÔ∏è –°—Ä–µ–¥–Ω–∏–π", callback_data="simplify_medium")],
            [InlineKeyboardButton("üî• –°–∏–ª—å–Ω—ã–π", callback_data="simplify_strong")],
            [InlineKeyboardButton("üîç –§–∞–∫—Ç—á–µ–∫–∏–Ω–≥", callback_data="fact_checking")]
        ])
    )

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_typing_action(update, context)
    doc = update.message.document
    file_name = doc.file_name.lower()
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞
    if not any(file_name.endswith(ext) for ext in {".txt", ".docx"}):
        await update.message.reply_text(
            "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç.\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: .txt, .docx"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    if doc.file_size > MAX_FILE_SIZE:
        await update.message.reply_text(
            f"‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª.\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE // (1024*1024)} –ú–ë"
        )
        return
    
    with tempfile.NamedTemporaryFile(
        delete=False,
        suffix=f"_{user_id}{os.path.splitext(file_name)[1]}"
    ) as temp_file:
        temp_path = temp_file.name
    
    try:
        file = await doc.get_file()
        await file.download_to_drive(temp_path)
        
        # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        if file_name.endswith(".txt"):
            text = await read_txt_file(temp_path)
        elif file_name.endswith(".docx"):
            text = await read_docx_file(temp_path)
        else:
            text = None
        
        if text is None:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return
        
        if not text.strip():
            await update.message.reply_text("‚ùå –§–∞–π–ª –ø—É—Å—Ç–æ–π.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
        if len(text) > MAX_TEXT_LENGTH:
            await update.message.reply_text(
                f"‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤).\n"
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
                "üí° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ –Ω–∞ —á–∞—Å—Ç–∏."
            )
            return
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
        estimated_parts = len(text) // 1500 + 1
        if estimated_parts > MAX_PARTS_FOR_WARNING:
            await update.message.reply_text(
                f"‚ö†Ô∏è –¢–µ–∫—Å—Ç –¥–æ–≤–æ–ª—å–Ω–æ –¥–ª–∏–Ω–Ω—ã–π ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤).\n"
                f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å {estimated_parts * 5} —Å–µ–∫—É–Ω–¥.\n"
                f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
            )
        
        context.user_data['pending_text'] = text
        context.user_data['source_type'] = 'document'
        
        await update.message.reply_text(
            f"üìÑ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:\n"
            f"‚Ä¢ –ò–º—è: {doc.file_name}\n"
            f"‚Ä¢ –†–∞–∑–º–µ—Ä: {doc.file_size // 1024} –ö–ë\n"
            f"‚Ä¢ –¢–µ–∫—Å—Ç: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚öñÔ∏è –°—Ä–µ–¥–Ω–∏–π", callback_data="simplify_medium")],
                [InlineKeyboardButton("üî• –°–∏–ª—å–Ω—ã–π", callback_data="simplify_strong")],
                [InlineKeyboardButton("üîç –§–∞–∫—Ç—á–µ–∫–∏–Ω–≥", callback_data="fact_checking")]
            ])
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
    finally:
        await safe_delete_file(temp_path)

async def fact_checking_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
    
    text = context.user_data.get('pending_text', '').strip()
    if not text:
        await safe_edit_message(query, "‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª —Å–Ω–∞—á–∞–ª–∞.")
        return
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
    if len(text) > 8000:
        await safe_edit_message(query, 
            f"‚ö†Ô∏è –¢–µ–∫—Å—Ç –¥–æ–≤–æ–ª—å–Ω–æ –¥–ª–∏–Ω–Ω—ã–π ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤).\n"
            f"–í—ã–¥–µ–ª–µ–Ω–∏–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è...\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
        )
    
    try:
        sentences = sent_tokenize(text, language='russian')
    except (LookupError, AttributeError) as e:
        logger.warning(f"Tokenizer error: {e}")
        sentences = re.split(r'(?<=[.!?])\s+', text)
    
    claims = [s.strip() for s in sentences if s.strip() and len(s) > 10]
    
    if not claims:
        await safe_edit_message(query, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–µ–ª–∏—Ç—å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.user_data['fact_check_claims'] = claims
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
    MAX_CLAIMS_DISPLAY = 15
    display_claims = claims[:MAX_CLAIMS_DISPLAY]
    remaining = len(claims) - MAX_CLAIMS_DISPLAY
    
    header = "üîç *–†–µ–∂–∏–º —Ñ–∞–∫—Ç—á–µ–∫–∏–Ω–≥–∞:*\n\n"
    if remaining > 0:
        header += f"–í—ã–¥–µ–ª–µ–Ω–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π: {len(claims)} (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ {MAX_CLAIMS_DISPLAY}):\n\n"
    else:
        header += f"–í—ã–¥–µ–ª–µ–Ω–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π: {len(claims)}:\n\n"
    
    await query.edit_message_text(header, parse_mode='Markdown')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ü–∏—è–º–∏
    batch_size = 5
    for i in range(0, len(display_claims), batch_size):
        batch = display_claims[i:i+batch_size]
        
        for j, claim in enumerate(batch, i+1):
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
            
            formatted_claim = f"_{j}._ {claim}"
            
            # –¢–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ "–£–ø—Ä–æ—Å—Ç–∏—Ç—å" –±–µ–∑ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"
            keyboard = [
                [InlineKeyboardButton("üìù –£–ø—Ä–æ—Å—Ç–∏—Ç—å", callback_data=f"simplify_claim_{j-1}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            try:
                await query.message.reply_text(
                    formatted_claim,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
                await query.message.reply_text(formatted_claim, parse_mode='Markdown')
        
        if i + batch_size < len(display_claims):
            await asyncio.sleep(1)
    
    if remaining > 0:
        await query.message.reply_text(
            f"‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ {MAX_CLAIMS_DISPLAY} —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π. "
            f"–û—Å—Ç–∞–ª—å–Ω—ã–µ {remaining} –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ."
        )
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥ –∫ —Ç–µ–∫—Å—Ç—É"
    keyboard = [
        [
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ–∫—Å—Ç—É", callback_data="back_to_uploaded_text")
        ],
        [
            InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="fact_check_help")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_typing_action(update, context)
    help_text = (
        "‚ùì *–ü–æ–º–æ—â—å –ø–æ TextEaseBot*\n\n"
        "ü§ñ *–ß—Ç–æ —è —É–º–µ—é:*\n"
        "‚Ä¢ üìù –£–ø—Ä–æ—â–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –Ω–∞ 2 —É—Ä–æ–≤–Ω—è—Ö\n"
        "‚Ä¢ üåç –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫\n"
        "‚Ä¢ üìÑ –†–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏ .txt –∏ .docx\n\n"
        "üìã *–ö–∞–∫ –Ω–∞—á–∞—Ç—å:*\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é\n"
        "2. –ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å —Ç–µ–∫—Å—Ç–æ–º\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –º–µ–Ω—é\n\n"
        "üîß *–£—Ä–æ–≤–Ω–∏ —É–ø—Ä–æ—â–µ–Ω–∏—è:*\n"
        "‚Ä¢ ‚öñÔ∏è *–°—Ä–µ–¥–Ω–∏–π* - –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ\n"
        "‚Ä¢ üî• *–°–∏–ª—å–Ω—ã–π* - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ\n\n"
        "‚ö†Ô∏è *–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*\n"
        "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 20 –ú–ë\n"
        "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: 10 000 —Å–∏–º–≤–æ–ª–æ–≤\n"
        "‚Ä¢ –Ø - –ò–ò, –º–æ–≥—É –æ—à–∏–±–∞—Ç—å—Å—è –≤ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–º–∞—Ö\n\n"
        "üí° *–°–æ–≤–µ—Ç:* –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∞–π–ª—ã."
    )
    keyboard = [
        [
            InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        help_text,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

def setup_handlers(application, models):
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))